diff --git a/src/microsoft/compiler/dxil_container.c b/src/microsoft/compiler/dxil_container.c
index 936bf9a792f..3830a708533 100644
--- a/src/microsoft/compiler/dxil_container.c
+++ b/src/microsoft/compiler/dxil_container.c
@@ -22,6 +22,7 @@
  */
 
 #include "dxil_container.h"
+#include "dxil_md5.h"
 #include "dxil_module.h"
 
 #include "util/u_debug.h"
@@ -387,5 +388,7 @@ dxil_container_write(struct dxil_container *c, struct blob *blob)
        !blob_write_bytes(blob, c->parts.data, c->parts.size))
       return false;
 
+   dxil_sign_blob(blob);
+
    return true;
 }
diff --git a/src/microsoft/compiler/dxil_md5.c b/src/microsoft/compiler/dxil_md5.c
new file mode 100644
index 00000000000..1bde72acfa4
--- /dev/null
+++ b/src/microsoft/compiler/dxil_md5.c
@@ -0,0 +1,334 @@
+/*
+ * Copyright © Steven Noonan
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+#include "dxil_md5.h"
+
+#include <assert.h>
+
+struct dxil_header
+{
+  uint32_t fourcc;          // "DXBC"
+  uint32_t hashValue[4];    // unknown hash function and data
+  uint32_t containerVersion;
+  uint32_t fileLength;
+  uint32_t numChunks;
+  // uint32 chunkOffsets[numChunks]; follows
+};
+
+typedef struct {
+    uint64_t size;        // Size of input in bytes
+    uint32_t buffer[4];   // Current accumulation of hash
+    uint8_t input[64];    // Input to be used in the next step
+    uint8_t digest[16];   // Result of algorithm
+} MD5_CTX;
+
+static void MD5_Init(MD5_CTX *ctx);
+static void MD5_Update(MD5_CTX *ctx, uint8_t *input, size_t input_len);
+static void MD5_Finalize(MD5_CTX *ctx);
+static void MD5_Step(uint32_t *buffer, uint32_t *input);
+
+// This signing method is copied from RenderDoc's DXBC code, seen here
+// https://github.com/baldurk/renderdoc/blob/b53bd38828a0eea2b2f47f7def6779906d226746/renderdoc/driver/shaders/dxbc/dxbc_container.cpp#L1202-L1299
+
+void
+dxil_sign_blob(struct blob *blob)
+{
+   struct dxil_header *header = (struct dxil_header *)blob->data;
+
+   MD5_CTX md5ctx = {0};
+   MD5_Init(&md5ctx);
+
+   // the hashable data starts immediately after the hash.
+   uint8_t *data = (uint8_t *)&header->containerVersion;
+   uint32_t length = (uint32_t)(blob->size - offsetof(struct dxil_header, containerVersion));
+
+   // we need to know the number of bits for putting in the trailing padding.
+   uint32_t numBits = length * 8;
+   uint32_t numBitsPart2 = (numBits >> 2) | 1;
+
+   // MD5 works on 64-byte chunks, process the first set of whole chunks, leaving 0-63 bytes left
+   // over
+   uint32_t leftoverLength = length % 64;
+   MD5_Update(&md5ctx, data, length - leftoverLength);
+
+   data += length - leftoverLength;
+
+   uint32_t block[16] = {0};
+   assert(sizeof(block) == 64);
+
+   // normally MD5 finishes by appending a 1 bit to the bitstring. Since we are only appending bytes
+   // this would be an 0x80 byte (the first bit is considered to be the MSB). Then it pads out with
+   // zeroes until it has 56 bytes in the last block and appends appends the message length as a
+   // 64-bit integer as the final part of that block.
+   // in other words, normally whatever is leftover from the actual message gets one byte appended,
+   // then if there's at least 8 bytes left we'll append the length. Otherwise we pad that block with
+   // 0s and create a new block with the length at the end.
+   // Or as the original RFC/spec says: padding is always performed regardless of whether the
+   // original buffer already ended in exactly a 56 byte block.
+   //
+   // The DXBC finalisation is slightly different (previous work suggests this is due to a bug in the
+   // original implementation and it was maybe intended to be exactly MD5?):
+   //
+   // The length provided in the padding block is not 64-bit properly: the second dword with the high
+   // bits is instead the number of nybbles(?) with 1 OR'd on. The length is also split, so if it's
+   // in
+   // a padding block the low bits are in the first dword and the upper bits in the last. If there's
+   // no padding block the low dword is passed in first before the leftovers of the message and then
+   // the upper bits at the end.
+
+   // if the leftovers uses at least 56, we can't fit both the trailing 1 and the 64-bit length, so
+   // we need a padding block and then our own block for the length.
+   if(leftoverLength >= 56)
+   {
+      // pass in the leftover data padded out to 64 bytes with zeroes
+      MD5_Update(&md5ctx, data, leftoverLength);
+
+      block[0] = 0x80;    // first padding bit is 1
+      MD5_Update(&md5ctx, (uint8_t *)block, 64 - leftoverLength);
+
+      // the final block contains the number of bits in the first dword, and the weird upper bits
+      block[0] = numBits;
+      block[15] = numBitsPart2;
+
+      // process this block directly, we're replacing the call to MD5_Final here manually
+      MD5_Update(&md5ctx, (uint8_t *)block, 64);
+   }
+   else
+   {
+      // the leftovers mean we can put the padding inside the final block. But first we pass the "low"
+      // number of bits:
+      MD5_Update(&md5ctx, (uint8_t *)&numBits, sizeof(numBits));
+
+      if(leftoverLength)
+         MD5_Update(&md5ctx, (uint8_t *)data, leftoverLength);
+
+      uint32_t paddingBytes = 64 - leftoverLength - 4;
+
+      // prepare the remainder of this block, starting with the 0x80 padding start right after the
+      // leftovers and the first part of the bit length above.
+      block[0] = 0x80;
+      // then add the remainder of the 'length' here in the final part of the block
+      memcpy(((uint8_t *)block) + paddingBytes - 4, &numBitsPart2, 4);
+
+      MD5_Update(&md5ctx, (uint8_t *)block, paddingBytes);
+   }
+
+   // replace signature in blob with the hash value
+   for (int i = 0; i < 4; ++i)
+      header->hashValue[i] = md5ctx.buffer[i];
+}
+
+//
+// This MD5 implementation is copied from here:
+// https://github.com/Zunawe/md5-c/blob/f3529b666b7ae8b80b0a9fa88ac2a91b389909c7/md5.c
+
+//
+// Derived from the RSA Data Security, Inc. MD5 Message-Digest Algorithm
+// and modified slightly to be functionally identical but condensed into control structures.
+//
+
+//
+// Constants defined by the MD5 algorithm
+//
+#define A 0x67452301
+#define B 0xefcdab89
+#define C 0x98badcfe
+#define D 0x10325476
+
+static uint32_t S[] = {7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22,
+                       5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20, 5,  9, 14, 20,
+                       4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23,
+                       6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21};
+
+static uint32_t K[] = {0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
+                       0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
+                       0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
+                       0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
+                       0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
+                       0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
+                       0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
+                       0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
+                       0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
+                       0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
+                       0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
+                       0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
+                       0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
+                       0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
+                       0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
+                       0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391};
+
+//
+// Padding used to make the size (in bits) of the input congruent to 448 mod 512
+//
+static uint8_t PADDING[] = {0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+                            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
+
+//
+// Bit-manipulation functions defined by the MD5 algorithm
+//
+#define F(X, Y, Z) ((X & Y) | (~X & Z))
+#define G(X, Y, Z) ((X & Z) | (Y & ~Z))
+#define H(X, Y, Z) (X ^ Y ^ Z)
+#define I(X, Y, Z) (Y ^ (X | ~Z))
+
+//
+// Rotates a 32-bit word left by n bits
+//
+static uint32_t rotateLeft(uint32_t x, uint32_t n){
+    return (x << n) | (x >> (32 - n));
+}
+
+
+//
+// Initialize a context
+//
+static void MD5_Init(MD5_CTX *ctx){
+    ctx->size = (uint64_t)0;
+
+    ctx->buffer[0] = (uint32_t)A;
+    ctx->buffer[1] = (uint32_t)B;
+    ctx->buffer[2] = (uint32_t)C;
+    ctx->buffer[3] = (uint32_t)D;
+}
+
+//
+// Add some amount of input to the context
+//
+// If the input fills out a block of 512 bits, apply the algorithm (MD5_Step)
+// and save the result in the buffer. Also updates the overall size.
+//
+static void MD5_Update(MD5_CTX *ctx, uint8_t *input_buffer, size_t input_len){
+    uint32_t input[16];
+    unsigned int offset = ctx->size % 64;
+    ctx->size += (uint64_t)input_len;
+
+    // Copy each byte in input_buffer into the next space in our context input
+    for(unsigned int i = 0; i < input_len; ++i){
+        ctx->input[offset++] = (uint8_t)*(input_buffer + i);
+
+        // If we've filled our context input, copy it into our local array input
+        // then reset the offset to 0 and fill in a new buffer.
+        // Every time we fill out a chunk, we run it through the algorithm
+        // to enable some back and forth between cpu and i/o
+        if(offset % 64 == 0){
+            for(unsigned int j = 0; j < 16; ++j){
+                // Convert to little-endian
+                // The local variable `input` our 512-bit chunk separated into 32-bit words
+                // we can use in calculations
+                input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
+                           (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
+                           (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
+                           (uint32_t)(ctx->input[(j * 4)]);
+            }
+            MD5_Step(ctx->buffer, input);
+            offset = 0;
+        }
+    }
+}
+
+//
+// Pad the current input to get to 448 bytes, append the size in bits to the very end,
+// and save the result of the final iteration into digest.
+//
+static void MD5_Finalize(MD5_CTX *ctx){
+    uint32_t input[16];
+    unsigned int offset = ctx->size % 64;
+    unsigned int padding_length = offset < 56 ? 56 - offset : (56 + 64) - offset;
+
+    // Fill in the padding and undo the changes to size that resulted from the update
+    MD5_Update(ctx, PADDING, padding_length);
+    ctx->size -= (uint64_t)padding_length;
+
+    // Do a final update (internal to this function)
+    // Last two 32-bit words are the two halves of the size (converted from bytes to bits)
+    for(unsigned int j = 0; j < 14; ++j){
+        input[j] = (uint32_t)(ctx->input[(j * 4) + 3]) << 24 |
+                   (uint32_t)(ctx->input[(j * 4) + 2]) << 16 |
+                   (uint32_t)(ctx->input[(j * 4) + 1]) <<  8 |
+                   (uint32_t)(ctx->input[(j * 4)]);
+    }
+    input[14] = (uint32_t)(ctx->size * 8);
+    input[15] = (uint32_t)((ctx->size * 8) >> 32);
+
+    MD5_Step(ctx->buffer, input);
+
+    // Move the result into digest (convert from little-endian)
+    for(unsigned int i = 0; i < 4; ++i){
+        ctx->digest[(i * 4) + 0] = (uint8_t)((ctx->buffer[i] & 0x000000FF));
+        ctx->digest[(i * 4) + 1] = (uint8_t)((ctx->buffer[i] & 0x0000FF00) >>  8);
+        ctx->digest[(i * 4) + 2] = (uint8_t)((ctx->buffer[i] & 0x00FF0000) >> 16);
+        ctx->digest[(i * 4) + 3] = (uint8_t)((ctx->buffer[i] & 0xFF000000) >> 24);
+    }
+}
+
+//
+// Step on 512 bits of input with the main MD5 algorithm.
+//
+static void MD5_Step(uint32_t *buffer, uint32_t *input){
+    uint32_t AA = buffer[0];
+    uint32_t BB = buffer[1];
+    uint32_t CC = buffer[2];
+    uint32_t DD = buffer[3];
+
+    uint32_t E;
+
+    unsigned int j;
+
+    for(unsigned int i = 0; i < 64; ++i){
+        switch(i / 16){
+            case 0:
+                E = F(BB, CC, DD);
+                j = i;
+                break;
+            case 1:
+                E = G(BB, CC, DD);
+                j = ((i * 5) + 1) % 16;
+                break;
+            case 2:
+                E = H(BB, CC, DD);
+                j = ((i * 3) + 5) % 16;
+                break;
+            default:
+                E = I(BB, CC, DD);
+                j = (i * 7) % 16;
+                break;
+        }
+
+        uint32_t temp = DD;
+        DD = CC;
+        CC = BB;
+        BB = BB + rotateLeft(AA + E + K[i] + input[j], S[i]);
+        AA = temp;
+    }
+
+    buffer[0] += AA;
+    buffer[1] += BB;
+    buffer[2] += CC;
+    buffer[3] += DD;
+}
diff --git a/src/microsoft/compiler/dxil_md5.h b/src/microsoft/compiler/dxil_md5.h
new file mode 100644
index 00000000000..37e2c3a6b48
--- /dev/null
+++ b/src/microsoft/compiler/dxil_md5.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright © Steven Noonan
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
+ * IN THE SOFTWARE.
+ */
+
+#ifndef DXIL_MD5_H
+#define DXIL_MD5_H
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+#include "util/blob.h"
+
+void
+dxil_sign_blob(struct blob *blob);
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff --git a/src/microsoft/compiler/meson.build b/src/microsoft/compiler/meson.build
index 671af5ee94d..4006943e225 100644
--- a/src/microsoft/compiler/meson.build
+++ b/src/microsoft/compiler/meson.build
@@ -7,6 +7,7 @@ files_libdxil_compiler = files(
   'dxil_dump.c',
   'dxil_enums.c',
   'dxil_function.c',
+  'dxil_md5.c',
   'dxil_module.c',
   'dxil_nir.c',
   'dxil_nir_lower_int_cubemaps.c',
