diff --git a/src/compiler/nir/nir_print.c b/src/compiler/nir/nir_print.c
index 15eb7094354..70764444113 100644
--- a/src/compiler/nir/nir_print.c
+++ b/src/compiler/nir/nir_print.c
@@ -1708,7 +1708,7 @@ print_intrinsic_instr(nir_intrinsic_instr *instr, print_state *state)
 
       case NIR_INTRINSIC_PREAMBLE_CLASS: {
          /* "General" handled above */
-         nir_preamble_class cls = nir_intrinsic_preamble_class(instr);
+         UNUSED nir_preamble_class cls = nir_intrinsic_preamble_class(instr);
          assert(cls == nir_preamble_class_image);
          fprintf(fp, "class=image");
          break;
diff --git a/src/gallium/drivers/d3d12/d3d12_resource.cpp b/src/gallium/drivers/d3d12/d3d12_resource.cpp
index 2d72f65558f..47ac1bc67ca 100644
--- a/src/gallium/drivers/d3d12/d3d12_resource.cpp
+++ b/src/gallium/drivers/d3d12/d3d12_resource.cpp
@@ -454,7 +454,7 @@ convert_planar_resource(struct d3d12_resource *res)
       D3D12_RESOURCE_DESC desc = GetDesc(res->bo->res);
       desc.Flags &= ~D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS;
       D3D12_PLACED_SUBRESOURCE_FOOTPRINT placed_footprint = {};
-      D3D12_SUBRESOURCE_FOOTPRINT *footprint = &placed_footprint.Footprint;
+      //D3D12_SUBRESOURCE_FOOTPRINT *footprint = &placed_footprint.Footprint;
       unsigned subresource = plane * desc.MipLevels * desc.DepthOrArraySize;
       screen->dev->GetCopyableFootprints(&desc, subresource, 1, 0, &placed_footprint, nullptr, nullptr, nullptr);
       assert(plane_res->base.b.width0 == footprint->Width);
diff --git a/src/gallium/drivers/zink/zink_context.c b/src/gallium/drivers/zink/zink_context.c
index 4e96d072618..97ff594b015 100644
--- a/src/gallium/drivers/zink/zink_context.c
+++ b/src/gallium/drivers/zink/zink_context.c
@@ -673,7 +673,7 @@ get_bufferview_for_binding(struct zink_context *ctx, gl_shader_stage stage, enum
 ALWAYS_INLINE static struct zink_resource *
 update_descriptor_state_ubo_db(struct zink_context *ctx, gl_shader_stage shader, unsigned slot, struct zink_resource *res)
 {
-   struct zink_screen *screen = zink_screen(ctx->base.screen);
+   UNUSED struct zink_screen *screen = zink_screen(ctx->base.screen);
    ctx->di.descriptor_res[ZINK_DESCRIPTOR_TYPE_UBO][shader][slot] = res;
    if (res) {
       ctx->di.db.ubos[shader][slot].address = res->obj->bda + ctx->ubos[shader][slot].buffer_offset;
